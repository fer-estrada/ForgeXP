// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())
  email String @unique
  username String @unique
  password String
  avatar String?
  isAdmin Boolean @default(false)
  fName String?
  lName String?
  createdAt DateTime @default(now())
  posts Post[]
  favorites Favorites[]
  community GameCommunity[]
  comments Comment[]
}

model GameCommunity {
  id Int @id @default(autoincrement())
  gameName String @unique
  isActive Boolean @default(false)
  description String?
  posts Post[]
  users User[]
}

model Post {
  id Int @id @default(autoincrement())
  title String
  content String? // where you store the video|photo
  description String? // for text post, or a desc for video|photo
  postType PostType
  createdAt DateTime @default(now())
  userId Int 
  user User @relation(fields: [userId], references: [id])
  communityId Int
  community GameCommunity @relation(fields: [communityId], references: [id])
  likes Int?
  favorites Favorites[]
  comments Comment[]
}

enum PostType {
  video
  image
  text
}

model Favorites{
  id Int @id @default(autoincrement())
  userId Int
  user User @relation(fields: [userId], references: [id])
  postId Int 
  post Post @relation(fields: [postId], references: [id])
}

model Comment{
  id Int @id @default(autoincrement())
  body String
  likes Int?
  postId Int
  post Post @relation(fields: [postId], references: [id])
  userId Int
  user User @relation(fields: [userId], references: [id])
}